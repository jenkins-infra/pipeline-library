Lints, builds, tests and eventually deploys a Docker image.

Please reference to <a href="https://github.com/jenkins-infra/pipeline-library/blob/master/resources/io/jenkins/infra/docker/README.adoc">related documentation</a> for more details.

The following arguments are available for this function:

- String **imageName**: (Mandatory) name of the image to build, usually referenced as the "Repository" part of a Docker image name without any tag (Example: "builder" or "terraform").
- Map **config**: (Optional) custom configuration for the image build and deploy process. This map can hold any of the following keys:
  * String **agentLabels** (Optional, defaults to "docker || linux-amd64-docker") String expression for the labels the agent must match.
  * Boolean **automaticSemanticVersioning**: (Optional, defaults to "false") Should a release be created for every merge to the mainBranch. This uses "jx-release-version" to determine the version number based on the commit history.
  * Boolean **includeImageNameInTag**: (Optional, defaults to "false") Set to true for multiple semversioned images built in parallel, will include the image name in tag to avoid conflict
  * String **dockerfile**: (Optional, defaults to "Dockerfile") Relative path to the Dockerfile to use within the repository (Example: "build.dockerfile", "docker/Dockerfile").
  * String ~~**platform**~~: DEPRECATED (Optional, defaults to "linux/amd64") Name of the docker platform to use when building this image..
  * String **targetplatforms**: (Optional, defaults to "linux/amd64") Define the (comma separated) list of Docker supported platforms to build the image for. Defaults to `linux/amd64` when unspecified. Incompatible with the legacy `platform` attribute.
  * String **nextVersionCommand** (Optional, defaults to "jx-release-version") If "automaticSemanticVersioning" is set, this is the command to retrieve the next version (to use for tagging and releasing)
  * String **gitCredentials**: (Optional, defaults to "") If "automaticSemanticVersioning" is set, name of the credential to use when tagging the git repository. Support user/password or GitHub App credential types.
  * String **imageDir**: (Optional, defaults to ".", the parent directory of the Dockerfile) Path to a directory to use as build context (Example: "docker/", "python/2.7") ref: https://docs.docker.com/engine/reference/commandline/build/#description.
  * String **registry**: (Optional, defaults to "" which defines the registry based on the current controller setup) Container registry to deploy this image to (Example: "ghcr.io", "python/2.7").
  * String **unstash**: (Optional, default to "") Allow to restore files from a previously saved stash if not empty, should contain the name of the last stashed as per https://www.jenkins.io/doc/pipeline/steps/workflow-basic-steps/#unstash-restore-files-previously-stashed.
  * String **dockerBakeFile**: (Optionan, default to "") Specify the path to a custom Docker Bake file to use instead of the default one
  * String **dockerBakeTarget**: (Optional, default to "default") Specify the target of a custom Docker Bake file to work with
  * Boolean **disablePublication**: (Optional, default to false) Allow to disable tagging and publication of container image and GitHub release

The lint phase generates a report when it fails, recorded by the hadolint tool in your Jenkins instance.

The build phase adds build arguments you can use in your Dockerfile:

- **GIT_COMMIT_REV** - The commit that triggered this build
- **GIT_SCM_URL** - Url to repo
- **BUILD_DATE** - Date of the image build (now)

The test phase is only executed if a file `common-cst.yml` or `<imageDir>/cst.yml` is found at the root of the repository with the "TAR" driver for security concerns.
If the build concerns a Windows image, a prefix `-windows` is expected (`common-cst-windows.yml` or `<imageDir>/cst-windows.yml`)
Please reference to https://github.com/GoogleContainerTools/container-structure-test.

Publication of the Docker image only happens when the build is triggered by:

- A push event on the repository principal branch
- A tag event on the repository


Example Usages

<pre><code>
buildDockerAndPublishImage('terraform')
</code></pre>

Build of two images in parallel
<pre><code>
parallel(
  failFast: true,
  'maven-jdk8': {
    buildDockerAndPublishImage('maven-jdk8', [
      imageDir: 'maven/jdk8',
      automaticSemanticVersioning: true,
      includeImageNameInTag: true,
    ])
  },
  'maven-jdk8-nanoserver': {
    buildDockerAndPublishImage('maven-jdk8-nanoserver', [
      imageDir: 'maven/jdk8',
      dockerfile: 'Dockerfile.nanoserver',
      targetplatforms: 'windows/amd64',
      agentLabels: 'windows',
      automaticSemanticVersioning: true,
      includeImageNameInTag: true,
    ])
  },
)
</code></pre>

Build of three linux images in parallel (imply docker bake inside)
<pre><code>
buildDockerAndPublishImage('wiki',[
  targetplatforms: 'linux/amd64,linux/arm64,linux/s390x'
]),
</code></pre>
